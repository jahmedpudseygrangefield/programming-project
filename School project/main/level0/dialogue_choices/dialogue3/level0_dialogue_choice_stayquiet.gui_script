function init(self)
	msg.post(".", "release_input_focus") 
	local node_stayquiet = gui.get_node("stayquiet_response_parent")
	gui.set_enabled(node_stayquiet, false)
end

--when the trigger is activated the GUI appears
function on_message(self, message_id, message, sender)
	if message_id == hash("dialogue_response_stayquiet") then
		local node_stayquiet = gui.get_node("stayquiet_response_parent") 
		gui.set_enabled(node_stayquiet, true)
		msg.post(".", "acquire_input_focus")

		--this should completely disable the related trigger stopping the double glitch
		msg.post("/trigger#dialogue_trigger_stayquiet", "disable")
	end
end

function on_input(self, action_id, action)
	--yourname dialogue option
	if action.pressed and gui.pick_node(gui.get_node("maybe"), action.x, action.y) then
		--GUI disappears after option is selected & takesaway input 
		local node_nothing = gui.get_node("stayquiet_response_parent")
		gui.set_enabled(node_nothing, false) 
		msg.post(".", "release_input_focus")

		--Disables collision & enables trigger for next apropriate response 
		msg.post("/collision#dialogue2_collision", "disable")
		--msg.post(receiver, message_id)

		--tired dialogue response option 
	elseif action.pressed and gui.pick_node(gui.get_node("fine"), action.x, action.y) then
		--GUI disappears after option is selected & takesaway input 
		local node_nothing = gui.get_node("stayquiet_response_parent")
		gui.set_enabled(node_nothing, false) 
		msg.post(".", "release_input_focus")

		--Disables collision & enables trigger for next apropriate response 
		msg.post("/collision#dialogue2_collision", "disable")
		--msg.post(receiver, message_id)
	end
end
